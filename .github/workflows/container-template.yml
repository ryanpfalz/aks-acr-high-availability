name: Microservice CI/CD Workflow
on:
    workflow_call:
        # outputs:
        #     variables:
        #         description: "Configuration values"
        #         value: ${{ jobs.configuration.outputs.variables }}

jobs:
    # configuration:
    #     uses: ./.github/workflows/config.yml

    containerize:
        name: "Build Docker image"

        needs: [configuration]
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout Repo"
              uses: actions/checkout@v2

            # TODO set up Python

            # - name: Set up Go
            #   uses: actions/setup-go@v1
            #   with:
            #       go-version: "1.19"
            #   id: go

            - name: Get current date
              id: date
              run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV

            # update config for prod environment
            - name: Variable replacement
              uses: microsoft/variable-substitution@v1
              with:
                  files: "./app/api/app_settings.json"
              env:
                  version: ${{ env.date }}-${{ github.run_number }}

            - name: "Registry Authentication"
              uses: azure/docker-login@v1
              with:
                  login-server: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io
                  username: ${{ secrets.REGISTRY_USERNAME }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            # TODO build image
            - name: Set up Docker Buildx
              id: buildx
              # Use the action from the master, as we've seen some inconsistencies with @v1
              # Issue: https://github.com/docker/build-push-action/issues/286
              uses: docker/setup-buildx-action@master
              with:
                  install: true

            # TODO update
            # build image and push to registry
            - name: Build production image
              uses: docker/build-push-action@v3
              with:
                  context: ./microservice/api
                  builder: ${{ steps.buildx.outputs.name }}
                  file: ./microservice/api/cmd/server/Dockerfile
                  # Set the desired build target here
                  # target: deploy
                  push: true
                  tags: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io/${{ fromJson(needs.configuration.outputs.variables).microserviceApiImageName }}:${{ github.sha }}
                  # cache-from: type=local,src=/tmp/.buildx-cache
                  # Note the mode=max here
                  # More: https://github.com/moby/buildkit#--export-cache-options
                  # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
                  # cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
                  build-args: |
                      "APP_ENV=${{ env.PROD_ENV }}"

    deploy:
        name: "Deploy Microservice"
        needs: [configuration, containerize]
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout Repo"
              uses: actions/checkout@v2

            - name: "Login via Azure CLI"
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_SP_CREDENTIALS }}

            # TODO deploy to AKS from ACR

            # https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#deploy-the-sample-image-from-acr-to-aks
            # replace yml variables for deploying ACR to AKS

            - name: Variable replacement
              uses: microsoft/variable-substitution@v1
              with:
                  files: "./microservice/api/acr-api-deployment.yml"
              env:
                  spec.template.spec.containers.0.image: ${{ fromJson(needs.configuration.outputs.variables).containerRegistryName }}.azurecr.io/${{ fromJson(needs.configuration.outputs.variables).microserviceApiImageName }}:${{ github.sha }}

            # az aks get-credentials -g ACADemo -n msaksdemocluster
            # kubectl apply -f ./microservice/api/acr-api-deployment.yml -f ./microservice/api/acr-api-service.yml
            - name: "Deploy from ACR to AKS"
              run: |
                  az aks get-credentials -g ACADemo -n ${{ fromJson(needs.configuration.outputs.variables).aksClusterName }}
                  kubectl apply -f ./microservice/api/acr-api-deployment.yml -f ./microservice/api/acr-api-ingress-service.yml -f ./microservice/api/acr-api-ingress.yml
              shell: pwsh